#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'strscan'
require_relative './tokenizer.rb'
require_relative './node.rb'

module Rgo
  class Parser < Racc::Parser

module_eval(<<'...end parse.y/module_eval...', 'parse.y', 70)

def parse(str)
  @q = Tokenizer.new(str).tokens

  do_parse
end

def next_token
  @q.shift
end
...end parse.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     9,    25,    10,    14,    16,    11,    17,    29,    12,    13,
     9,    25,    10,    18,    19,    11,    20,    33,    12,    13,
     9,    25,    10,    21,    25,    11,   nil,    34,    12,    13,
     9,   nil,    10,   nil,   nil,    11,    27,   nil,    12,    13,
     9,   nil,    10,   nil,    28,    11,   nil,   nil,    12,    13,
     9,   nil,    10,   nil,    31,    11,   nil,   nil,    12,    13,
     9,   nil,    10,   nil,   nil,    11,   nil,   nil,    12,    13,
     9,   nil,    10,   nil,   nil,    11,   nil,   nil,    12,    13,
     9,   nil,    10,   nil,    37,    11,   nil,   nil,    12,    13,
     9,   nil,    10,   nil,    38,    11,   nil,   nil,    12,    13 ]

racc_action_check = [
     0,    23,     0,     1,     9,     0,    10,    23,     0,     0,
     2,    27,     2,    11,    12,     2,    13,    27,     2,     2,
    17,    32,    17,    14,    18,    17,   nil,    32,    17,    17,
    19,   nil,    19,   nil,   nil,    19,    19,   nil,    19,    19,
    22,   nil,    22,   nil,    22,    22,   nil,   nil,    22,    22,
    26,   nil,    26,   nil,    26,    26,   nil,   nil,    26,    26,
    33,   nil,    33,   nil,   nil,    33,   nil,   nil,    33,    33,
    34,   nil,    34,   nil,   nil,    34,   nil,   nil,    34,    34,
    35,   nil,    35,   nil,    35,    35,   nil,   nil,    35,    35,
    36,   nil,    36,   nil,    36,    36,   nil,   nil,    36,    36 ]

racc_action_pointer = [
    -6,     3,     4,   nil,   nil,   nil,   nil,   nil,   nil,    -3,
    -3,     1,     3,     7,    23,   nil,   nil,    14,    17,    24,
   nil,   nil,    34,    -6,   nil,   nil,    44,     4,   nil,   nil,
   nil,   nil,    14,    54,    64,    74,    84,   nil,   nil ]

racc_action_default = [
    -4,   -24,    -1,    -2,    -5,    -6,    -7,    -8,    -9,   -24,
   -24,   -24,   -24,   -24,   -24,    -3,   -12,    -4,   -24,    -4,
   -21,    39,   -24,   -24,   -15,   -17,   -24,   -24,   -13,   -14,
   -16,   -20,   -24,    -4,    -4,   -24,   -24,   -19,   -18 ]

racc_goto_table = [
     2,    23,    15,    30,     1,   nil,   nil,   nil,   nil,   nil,
    32,   nil,    30,   nil,   nil,   nil,   nil,    22,   nil,    26,
   nil,   nil,    15,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    35,    36,    15,    15 ]

racc_goto_check = [
     2,    11,     3,    12,     1,   nil,   nil,   nil,   nil,   nil,
    11,   nil,    12,   nil,   nil,   nil,   nil,     2,   nil,     2,
   nil,   nil,     3,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     2,     3,     3 ]

racc_goto_pointer = [
   nil,     4,     0,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -17,   -20 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,   nil,
   nil,   nil,    24 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 17, :_reduce_none,
  1, 18, :_reduce_none,
  2, 18, :_reduce_3,
  0, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  5, 25, :_reduce_10,
  7, 25, :_reduce_11,
  2, 21, :_reduce_12,
  4, 20, :_reduce_13,
  4, 22, :_reduce_14,
  1, 27, :_reduce_15,
  2, 27, :_reduce_16,
  1, 28, :_reduce_17,
  7, 23, :_reduce_18,
  6, 23, :_reduce_19,
  4, 23, :_reduce_20,
  2, 24, :_reduce_21,
  3, 26, :_reduce_22,
  1, 26, :_reduce_none ]

racc_reduce_n = 24

racc_shift_n = 39

racc_token_table = {
  false => 0,
  :error => 1,
  "if" => 2,
  "(" => 3,
  ")" => 4,
  "else" => 5,
  :KEYWORD_REQUIRE => 6,
  :STRING => 7,
  :KEYWORD_MODULE => 8,
  :CONSTANT => 9,
  :KEYWORD_END => 10,
  :IDENTIFIER => 11,
  :LPAREN => 12,
  :RPAREN => 13,
  :KEYWORD_DEF => 14,
  :KEYWORD_INCLUDE => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"if\"",
  "\"(\"",
  "\")\"",
  "\"else\"",
  "KEYWORD_REQUIRE",
  "STRING",
  "KEYWORD_MODULE",
  "CONSTANT",
  "KEYWORD_END",
  "IDENTIFIER",
  "LPAREN",
  "RPAREN",
  "KEYWORD_DEF",
  "KEYWORD_INCLUDE",
  "$start",
  "target",
  "statement_list",
  "statement",
  "module_statement",
  "require_statement",
  "func_call",
  "func_def",
  "include_statement",
  "if_statement",
  "expression",
  "args",
  "arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parse.y', 9)
  def _reduce_3(val, _values, result)
     result = val
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parse.y', 22)
  def _reduce_10(val, _values, result)
     result = "<#{val[2]} implies #{val[4]}>\n"
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 24)
  def _reduce_11(val, _values, result)
     result = "<#{val[2]} implies #{val[4]} otherwise #{val[6]}>\n"
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 27)
  def _reduce_12(val, _values, result)
     result = Node.new(:require, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 30)
  def _reduce_13(val, _values, result)
    			result = Node.new(:module, val[1], val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 34)
  def _reduce_14(val, _values, result)
     result = Node.new(:func_call, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 36)
  def _reduce_15(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 36)
  def _reduce_16(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 38)
  def _reduce_17(val, _values, result)
     result = Node.new(:string, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 44)
  def _reduce_18(val, _values, result)
          result = Node.new(:func_def, val[1], [val[3], val[5]])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 47)
  def _reduce_19(val, _values, result)
          result = Node.new(:func_def, val[1], [nil, val[4]])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 50)
  def _reduce_20(val, _values, result)
          result = Node.new(:func_def, val[1], [nil, val[2]])

    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 54)
  def _reduce_21(val, _values, result)
     result = Node.new(:include, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parse.y', 57)
  def _reduce_22(val, _values, result)
     result = val[0,3].join
    result
  end
.,.,

# reduce 23 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Rgo
